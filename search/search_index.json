{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Qwiic OLED Arduino Library The SparkFun Qwiic OLED Arduino Library is a single graphics module that supports all SparkFun OLED boards based on the SSD1306 from Solomon Systech. Prior to this library, three different libraries were used to support our four different OLED boards. The SparkFun Qwiic OLED Library delivers a common implementation for all our Qwiic OLED products, delivering a unified, fast, and efficient solution that implements a familiar and easy to understand user experience. Key Features Implements common graphics capabilities: pixel, line, rectangle, filled rectangle, circle, filled circle, bitmap, text and raster operators (i.e. XOR). Smart data transfer to the device \u2013 only sends dirty regions of the graphics buffer to the OLED device, not the entire buffer. High performance \u2013 2x faster than our previous OLED library, often much higher. Efficient memory usage. No dynamic memory utilized. Static resources are loaded once, and only on explicit declaration. Implements a familiar interface, making migration from older libraries straight forward Getting Started The Getting Started Page outlines library installation and the general use of the qwiic OLED library. Detailed examples are included as part of the library installation process and available in the Arduino IDE File > Examples > menu. A walk-thru of key examples is contained in the Examples section of this documentation set. A full API Reference is also provided for the library. Supported Products The SparkFun Qwiic OLED Arduino Library supports the following SparFun Products SparkFun Micro OLED Breakout (Qwiic) SparkFun Qwiic OLED Display (0.91 in, 128x32) SparkFun Transparent Graphical OLED Breakout (Qwiic) Supported Microcontrollers - Arduino Environment Artemis SAMD51 ESP32 STM32 SAMD21 nrf5280 Teensy ATMega328 License The SparkFun Qwiic OLED Arduino Library is licensed using the Open Source MIT License","title":"Home"},{"location":"#the-qwiic-oled-arduino-library","text":"The SparkFun Qwiic OLED Arduino Library is a single graphics module that supports all SparkFun OLED boards based on the SSD1306 from Solomon Systech. Prior to this library, three different libraries were used to support our four different OLED boards. The SparkFun Qwiic OLED Library delivers a common implementation for all our Qwiic OLED products, delivering a unified, fast, and efficient solution that implements a familiar and easy to understand user experience.","title":"The Qwiic OLED Arduino Library"},{"location":"#key-features","text":"Implements common graphics capabilities: pixel, line, rectangle, filled rectangle, circle, filled circle, bitmap, text and raster operators (i.e. XOR). Smart data transfer to the device \u2013 only sends dirty regions of the graphics buffer to the OLED device, not the entire buffer. High performance \u2013 2x faster than our previous OLED library, often much higher. Efficient memory usage. No dynamic memory utilized. Static resources are loaded once, and only on explicit declaration. Implements a familiar interface, making migration from older libraries straight forward","title":"Key Features"},{"location":"#getting-started","text":"The Getting Started Page outlines library installation and the general use of the qwiic OLED library. Detailed examples are included as part of the library installation process and available in the Arduino IDE File > Examples > menu. A walk-thru of key examples is contained in the Examples section of this documentation set. A full API Reference is also provided for the library.","title":"Getting Started"},{"location":"#supported-products","text":"The SparkFun Qwiic OLED Arduino Library supports the following SparFun Products SparkFun Micro OLED Breakout (Qwiic) SparkFun Qwiic OLED Display (0.91 in, 128x32) SparkFun Transparent Graphical OLED Breakout (Qwiic)","title":"Supported Products"},{"location":"#supported-microcontrollers-arduino-environment","text":"Artemis SAMD51 ESP32 STM32 SAMD21 nrf5280 Teensy ATMega328","title":"Supported Microcontrollers - Arduino Environment"},{"location":"#license","text":"The SparkFun Qwiic OLED Arduino Library is licensed using the Open Source MIT License","title":"License"},{"location":"api_arduino/","text":"Arduino Print Methods used to support Arduino Print functionality. setCursor() This method is called set the \"cursor\" position in the device. The library supports the Arduino Print interface, enabling the use of a print() and println() methods. The set cursor position defines where to start text output for this functionality. void setCursor ( uint8_t x , uint8_t y ) Parameter Type Description x uint8_t The X coordinate of the cursor y uint8_t The Y coordinate of the cursor setColor() This method is called to set the current color of the system. This is used by the Arduino Print interface functionality void setColor ( uint8_t clr ) Parameter Type Description clr uint8_t The color to set. 0 = black, > 0 = white getColor() This method is called to get the current color of the system. This is used by the Arduino Print interface functionality uint8_t getColor ( void ) Parameter Type Description return value uint8_t The current color","title":"Arduino Print"},{"location":"api_arduino/#arduino-print","text":"Methods used to support Arduino Print functionality.","title":"Arduino Print"},{"location":"api_arduino/#setcursor","text":"This method is called set the \"cursor\" position in the device. The library supports the Arduino Print interface, enabling the use of a print() and println() methods. The set cursor position defines where to start text output for this functionality. void setCursor ( uint8_t x , uint8_t y ) Parameter Type Description x uint8_t The X coordinate of the cursor y uint8_t The Y coordinate of the cursor","title":"setCursor()"},{"location":"api_arduino/#setcolor","text":"This method is called to set the current color of the system. This is used by the Arduino Print interface functionality void setColor ( uint8_t clr ) Parameter Type Description clr uint8_t The color to set. 0 = black, > 0 = white","title":"setColor()"},{"location":"api_arduino/#getcolor","text":"This method is called to get the current color of the system. This is used by the Arduino Print interface functionality uint8_t getColor ( void ) Parameter Type Description return value uint8_t The current color","title":"getColor()"},{"location":"api_device/","text":"Device Operations Methods to setup the device, get device information and change display options. Initialization begin() This method is called to initialize the OLED library and connection to the OLED device. This method must be called before calling any graphics methods. bool begin ( TwoWire & wirePort , uint8_t address ) Parameter Type Description wirePort TwoWire optional . The Wire port. If not provided, the default port is used address uint8_t optional . I2C Address. If not provided, the default address is used. return value bool true on success, false on startup failure reset() When called, this method reset the library state and OLED device to their intial state. Helpful to reset the OLED after waking up a system from a sleep state. void reset () Parameter Type Description return value bool true on success, false on startup failure Geometry getWidth() This method returns the width, in pixels, of the connected OLED device uint8_t getWidth ( void ) Parameter Type Description return value uint8_t The width in pixels of the connected OLED device getHeight() This method returns the height, in pixels, of the connected OLED device uint8_t getHeight ( void ) Parameter Type Description return value uint8_t The height in pixels of the connected OLED device Display Modes invert() This method inverts the current graphics on the display. This results of this command happen immediatly. void invert ( bool bInvert ) Parameter Type Description bInvert bool true - the screen is inverted. false - the screen is set to normal flipVertical() When called, the screen contents are flipped vertically if the flip parameter is true, or restored to normal display if the flip parameter is false. void flipVertical ( bool bFlip ) Parameter Type Description bFlip bool true - the screen is flipped vertically. false - the screen is set to normal flipHorizontal() When called, the screen contents are flipped horizontally if the flip parameter is true, or restored to normal display if the flip parameter is false. void flipHorizontal ( bool bFlip ) Parameter Type Description bFlip bool true - the screen is flipped horizontally. false - the screen is set to normal displayPower() Used to turn the OLED display on or off. void displayPower ( bool bEnable ) Parameter Type Description bEnable bool true - the OLED display is powered on (default). false - the OLED dsiplay is powered off.","title":"Device"},{"location":"api_device/#device-operations","text":"Methods to setup the device, get device information and change display options.","title":"Device Operations"},{"location":"api_device/#initialization","text":"","title":"Initialization"},{"location":"api_device/#begin","text":"This method is called to initialize the OLED library and connection to the OLED device. This method must be called before calling any graphics methods. bool begin ( TwoWire & wirePort , uint8_t address ) Parameter Type Description wirePort TwoWire optional . The Wire port. If not provided, the default port is used address uint8_t optional . I2C Address. If not provided, the default address is used. return value bool true on success, false on startup failure","title":"begin()"},{"location":"api_device/#reset","text":"When called, this method reset the library state and OLED device to their intial state. Helpful to reset the OLED after waking up a system from a sleep state. void reset () Parameter Type Description return value bool true on success, false on startup failure","title":"reset()"},{"location":"api_device/#geometry","text":"","title":"Geometry"},{"location":"api_device/#getwidth","text":"This method returns the width, in pixels, of the connected OLED device uint8_t getWidth ( void ) Parameter Type Description return value uint8_t The width in pixels of the connected OLED device","title":"getWidth()"},{"location":"api_device/#getheight","text":"This method returns the height, in pixels, of the connected OLED device uint8_t getHeight ( void ) Parameter Type Description return value uint8_t The height in pixels of the connected OLED device","title":"getHeight()"},{"location":"api_device/#display-modes","text":"","title":"Display Modes"},{"location":"api_device/#invert","text":"This method inverts the current graphics on the display. This results of this command happen immediatly. void invert ( bool bInvert ) Parameter Type Description bInvert bool true - the screen is inverted. false - the screen is set to normal","title":"invert()"},{"location":"api_device/#flipvertical","text":"When called, the screen contents are flipped vertically if the flip parameter is true, or restored to normal display if the flip parameter is false. void flipVertical ( bool bFlip ) Parameter Type Description bFlip bool true - the screen is flipped vertically. false - the screen is set to normal","title":"flipVertical()"},{"location":"api_device/#fliphorizontal","text":"When called, the screen contents are flipped horizontally if the flip parameter is true, or restored to normal display if the flip parameter is false. void flipHorizontal ( bool bFlip ) Parameter Type Description bFlip bool true - the screen is flipped horizontally. false - the screen is set to normal","title":"flipHorizontal()"},{"location":"api_device/#displaypower","text":"Used to turn the OLED display on or off. void displayPower ( bool bEnable ) Parameter Type Description bEnable bool true - the OLED display is powered on (default). false - the OLED dsiplay is powered off.","title":"displayPower()"},{"location":"api_draw/","text":"Drawing Settings/State Methods for setting the drawing state of the library. setFont() This method is called to set the current font in the library. The current font is used when calling the text() method on this device. The default font for the device is 5x7 . void setFont ( QwiicFont & theFont ) void setFont ( const QwiicFont * theFont ) Parameter Type Description theFont QwiicFont The font to set as current in the device theFont QwiicFont* Pointer to the font to set as current in the device. For the library, fonts are added to your program by including them via include files which are part of this library. The following fonts are included: Font Include File Font Variable Description 5x7 <res/qw_fnt_5x7.h> QW_FONT_5X7 A full, 5 x 7 font 31x48 <res/qw_fnt_31x48.h> QW_FONT_31X48 A full, 31 x 48 font Seven Segment <res/qw_fnt_7segment.h> QW_FONT_7SEGMENT Numbers only 8x16 <res/qw_fnt_8x16.h> QW_FONT_8X16 A full, 8 x 16 font Large Numbers <res/qw_fnt_largenum.h> QW_FONT_LARGENUM Numbers only For each font, the font variables are objects with the following attributes: Attribute Value width The font width in pixels height The font height in pixels start The font start character offset n_chars The number of characters map_width The width of the font map Example use of a font object attribute: #include <res/qw_fnt_31x48.h> int myFontWidth = QW_FONT_31X48 . width ; getFont() This method returns the current font for the device. QwiicFont * getFont ( void ) Parameter Type Description return value QwiicFont* A pointer to the current font. See setFont() for font object details. getFontName() This method returns the height in pixels of a provided String based on the current device font. String getFontName ( void ) Parameter Type Description return value String The name of the current font. getStringWidth() This method returns the width in pixels of a provided String based on the current device font. unsigned int getStringWidth ( String text ) Parameter Type Description text String The string used to determine width return value unsigned int The width of the provide string, as determined using the current font. getStringHeight() This method returns the height in pixels of a provided String based on the current device font. unsigned int getStringHeight ( String text ) Parameter Type Description text String The string used to determine height return value unsigned int The height of the provide string, as determined using the current font. setDrawMode() This method sets the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. void setDrawMode ( grRasterOp_t rop ) Parameter Type Description rop grRasterOp_t The raster operation (ROP) to set the graphics system to. Raster operations device how source (pixels to draw) are represented on the destination device. The available Raster Operation (ROP) codes are: ROP Code Description grROPCopy default Drawn pixel values are copied to the device screen grROPNotCopy A not operation is applied to the source value before copying to screen grROPNot A not operation is applied to the destination (screen) value grROPXOR A XOR operation is performed between the source and destination values grROPBlack A value of 0, or black is drawn to the destination grROPWhite A value of 1, or black is drawn to the destination getDrawMode() This method returns the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. grRasterOp_t getDrawMode ( void ) Parameter Type Description return value grRasterOp_t The current aster operation (ROP) of the graphics system.","title":"Drawing State"},{"location":"api_draw/#drawing-settingsstate","text":"Methods for setting the drawing state of the library.","title":"Drawing Settings/State"},{"location":"api_draw/#setfont","text":"This method is called to set the current font in the library. The current font is used when calling the text() method on this device. The default font for the device is 5x7 . void setFont ( QwiicFont & theFont ) void setFont ( const QwiicFont * theFont ) Parameter Type Description theFont QwiicFont The font to set as current in the device theFont QwiicFont* Pointer to the font to set as current in the device. For the library, fonts are added to your program by including them via include files which are part of this library. The following fonts are included: Font Include File Font Variable Description 5x7 <res/qw_fnt_5x7.h> QW_FONT_5X7 A full, 5 x 7 font 31x48 <res/qw_fnt_31x48.h> QW_FONT_31X48 A full, 31 x 48 font Seven Segment <res/qw_fnt_7segment.h> QW_FONT_7SEGMENT Numbers only 8x16 <res/qw_fnt_8x16.h> QW_FONT_8X16 A full, 8 x 16 font Large Numbers <res/qw_fnt_largenum.h> QW_FONT_LARGENUM Numbers only For each font, the font variables are objects with the following attributes: Attribute Value width The font width in pixels height The font height in pixels start The font start character offset n_chars The number of characters map_width The width of the font map Example use of a font object attribute: #include <res/qw_fnt_31x48.h> int myFontWidth = QW_FONT_31X48 . width ;","title":"setFont()"},{"location":"api_draw/#getfont","text":"This method returns the current font for the device. QwiicFont * getFont ( void ) Parameter Type Description return value QwiicFont* A pointer to the current font. See setFont() for font object details.","title":"getFont()"},{"location":"api_draw/#getfontname","text":"This method returns the height in pixels of a provided String based on the current device font. String getFontName ( void ) Parameter Type Description return value String The name of the current font.","title":"getFontName()"},{"location":"api_draw/#getstringwidth","text":"This method returns the width in pixels of a provided String based on the current device font. unsigned int getStringWidth ( String text ) Parameter Type Description text String The string used to determine width return value unsigned int The width of the provide string, as determined using the current font.","title":"getStringWidth()"},{"location":"api_draw/#getstringheight","text":"This method returns the height in pixels of a provided String based on the current device font. unsigned int getStringHeight ( String text ) Parameter Type Description text String The string used to determine height return value unsigned int The height of the provide string, as determined using the current font.","title":"getStringHeight()"},{"location":"api_draw/#setdrawmode","text":"This method sets the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. void setDrawMode ( grRasterOp_t rop ) Parameter Type Description rop grRasterOp_t The raster operation (ROP) to set the graphics system to. Raster operations device how source (pixels to draw) are represented on the destination device. The available Raster Operation (ROP) codes are: ROP Code Description grROPCopy default Drawn pixel values are copied to the device screen grROPNotCopy A not operation is applied to the source value before copying to screen grROPNot A not operation is applied to the destination (screen) value grROPXOR A XOR operation is performed between the source and destination values grROPBlack A value of 0, or black is drawn to the destination grROPWhite A value of 1, or black is drawn to the destination","title":"setDrawMode()"},{"location":"api_draw/#getdrawmode","text":"This method returns the current draw mode for the library. The draw mode determines how pixels are set on the screen during drawing operations. grRasterOp_t getDrawMode ( void ) Parameter Type Description return value grRasterOp_t The current aster operation (ROP) of the graphics system.","title":"getDrawMode()"},{"location":"api_graphics/","text":"Graphics Methods Methods used to draw and display graphics. display() When called, any pending display updates are sent to the connected OLED device. This includes drawn graphics and erase commands. void display ( void ) Parameter Type Description NONE erase() Erases all graphics on the device, placing the display in a blank state. The erase update isn't sent to the device until the next display() call on the device. void erase ( void ) Parameter Type Description NONE pixel() Set the value of a pixel on the screen. void pixel ( uint8_t x , uint8_t y , uint8_t clr ) Parameter Type Description x uint8_t The X coordinate of the pixel to set y uint8_t The Y coordinate of the pixel to set clr uint8_t optional The color value to set the pixel. This defaults to white (1). line() Draw a line on the screen. Note: If a line is horizontal (y0 = y1) or vertical (x0 = x1), optimized draw algorithms are used by the library. void line ( uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 , uint8_t clr ) Parameter Type Description x0 uint8_t The start X coordinate of the line y0 uint8_t The start Y coordinate of the line x1 uint8_t The end X coordinate of the line y1 uint8_t The end Y coordinate of the line clr uint8_t optional The color value to draw the line. This defaults to white (1). rectangle() Draw a rectangle on the screen. void rectangle ( uint8_t x0 , uint8_t y0 , uint8_t width , uint8_t height , uint8_t clr ) Parameter Type Description x0 uint8_t The start X coordinate of the rectangle - upper left corner y0 uint8_t The start Y coordinate of the rectangle - upper left corner width uint8_t The width of the rectangle height uint8_t The height of the rectangle clr uint8_t optional The color value to draw the line. This defaults to white (1). rectangleFill() Draw a filled rectangle on the screen. void rectangleFill ( uint8_t x0 , uint8_t y0 , uint8_t width , uint8_t height , uint8_t clr ) Parameter Type Description x0 uint8_t The start X coordinate of the rectangle - upper left corner y0 uint8_t The start Y coordinate of the rectangle - upper left corner width uint8_t The width of the rectangle height uint8_t The height of the rectangle clr uint8_t optional The color value to draw the line. This defaults to white (1). circle() Draw a circle on the screen. void circle ( uint8_t x0 , uint8_t y0 , uint8_t radius , uint8_t clr ) Parameter Type Description x0 uint8_t The X coordinate of the circle center y0 uint8_t The Y coordinate of the circle center radius uint8_t The radius of the circle clr uint8_t optional The color value to draw the circle. This defaults to white (1). circleFill() Draw a filled circle on the screen. void circleFill ( uint8_t x0 , uint8_t y0 , uint8_t radius , uint8_t clr ) Parameter Type Description x0 uint8_t The X coordinate of the circle center y0 uint8_t The Y coordinate of the circle center radius uint8_t The radius of the circle clr uint8_t optional The color value to draw the circle. This defaults to white (1). bitmap() Draws a bitmap on the screen. The bitmap should be 8 bit encoded - each pixel contains 8 y values. void bitmap ( uint8_t x0 , uint8_t y0 , uint8_t * pBitmap , uint8_t bmp_width , uint8_t bmp_height ) Parameter Type Description x0 uint8_t The X coordinate to place the bitmap - upper left corner y0 uint8_t The Y coordinate to place the bitmap - upper left corner pBitmap uint8_t * A pointer to the bitmap array bmp_width uint8_t The width of the bitmap bmp_height uint8_t The height of the bitmap bitmap() Draws a bitmap on the screen. The bitmap should be 8 bit encoded - each pixel contains 8 y values. The coordinate [x1,y1] allows for only a portion of bitmap to be drawn. void bitmap ( uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 , uint8_t * pBitmap , uint8_t bmp_width , uint8_t bmp_height ) Parameter Type Description x0 uint8_t The X coordinate to place the bitmap - upper left corner y0 uint8_t The Y coordinate to place the bitmap - upper left corner x1 uint8_t The end X coordinate of the bitmap - lower right corner y1 uint8_t The end Y coordinate of the bitmap - lower right corner pBitmap uint8_t * A pointer to the bitmap array bmp_width uint8_t The width of the bitmap bmp_height uint8_t The height of the bitmap bitmap() Draws a bitmap on the screen using a Bitmap object for the bitmap data. void bitmap ( uint8_t x0 , uint8_t y0 , QwiicBitmap & bitmap ) Parameter Type Description x0 uint8_t The X coordinate to place the bitmap - upper left corner y0 uint8_t The Y coordinate to place the bitmap - upper left corner Bitmap QwiicBitmap A bitmap object text() Draws a string using the current font on the screen. void text ( uint8_t x0 , uint8_t y0 , const char * text , uint8_t clr ) Parameter Type Description x0 uint8_t The X coordinate to start drawing the text y0 uint8_t The Y coordinate to start drawing the text text const char* The string to draw on the screen text String The Arduino string to draw on the screen clr uint8_t optional The color value to draw the circle. This defaults to white (1).","title":"Graphics"},{"location":"api_graphics/#graphics-methods","text":"Methods used to draw and display graphics.","title":"Graphics Methods"},{"location":"api_graphics/#display","text":"When called, any pending display updates are sent to the connected OLED device. This includes drawn graphics and erase commands. void display ( void ) Parameter Type Description NONE","title":"display()"},{"location":"api_graphics/#erase","text":"Erases all graphics on the device, placing the display in a blank state. The erase update isn't sent to the device until the next display() call on the device. void erase ( void ) Parameter Type Description NONE","title":"erase()"},{"location":"api_graphics/#pixel","text":"Set the value of a pixel on the screen. void pixel ( uint8_t x , uint8_t y , uint8_t clr ) Parameter Type Description x uint8_t The X coordinate of the pixel to set y uint8_t The Y coordinate of the pixel to set clr uint8_t optional The color value to set the pixel. This defaults to white (1).","title":"pixel()"},{"location":"api_graphics/#line","text":"Draw a line on the screen. Note: If a line is horizontal (y0 = y1) or vertical (x0 = x1), optimized draw algorithms are used by the library. void line ( uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 , uint8_t clr ) Parameter Type Description x0 uint8_t The start X coordinate of the line y0 uint8_t The start Y coordinate of the line x1 uint8_t The end X coordinate of the line y1 uint8_t The end Y coordinate of the line clr uint8_t optional The color value to draw the line. This defaults to white (1).","title":"line()"},{"location":"api_graphics/#rectangle","text":"Draw a rectangle on the screen. void rectangle ( uint8_t x0 , uint8_t y0 , uint8_t width , uint8_t height , uint8_t clr ) Parameter Type Description x0 uint8_t The start X coordinate of the rectangle - upper left corner y0 uint8_t The start Y coordinate of the rectangle - upper left corner width uint8_t The width of the rectangle height uint8_t The height of the rectangle clr uint8_t optional The color value to draw the line. This defaults to white (1).","title":"rectangle()"},{"location":"api_graphics/#rectanglefill","text":"Draw a filled rectangle on the screen. void rectangleFill ( uint8_t x0 , uint8_t y0 , uint8_t width , uint8_t height , uint8_t clr ) Parameter Type Description x0 uint8_t The start X coordinate of the rectangle - upper left corner y0 uint8_t The start Y coordinate of the rectangle - upper left corner width uint8_t The width of the rectangle height uint8_t The height of the rectangle clr uint8_t optional The color value to draw the line. This defaults to white (1).","title":"rectangleFill()"},{"location":"api_graphics/#circle","text":"Draw a circle on the screen. void circle ( uint8_t x0 , uint8_t y0 , uint8_t radius , uint8_t clr ) Parameter Type Description x0 uint8_t The X coordinate of the circle center y0 uint8_t The Y coordinate of the circle center radius uint8_t The radius of the circle clr uint8_t optional The color value to draw the circle. This defaults to white (1).","title":"circle()"},{"location":"api_graphics/#circlefill","text":"Draw a filled circle on the screen. void circleFill ( uint8_t x0 , uint8_t y0 , uint8_t radius , uint8_t clr ) Parameter Type Description x0 uint8_t The X coordinate of the circle center y0 uint8_t The Y coordinate of the circle center radius uint8_t The radius of the circle clr uint8_t optional The color value to draw the circle. This defaults to white (1).","title":"circleFill()"},{"location":"api_graphics/#bitmap","text":"Draws a bitmap on the screen. The bitmap should be 8 bit encoded - each pixel contains 8 y values. void bitmap ( uint8_t x0 , uint8_t y0 , uint8_t * pBitmap , uint8_t bmp_width , uint8_t bmp_height ) Parameter Type Description x0 uint8_t The X coordinate to place the bitmap - upper left corner y0 uint8_t The Y coordinate to place the bitmap - upper left corner pBitmap uint8_t * A pointer to the bitmap array bmp_width uint8_t The width of the bitmap bmp_height uint8_t The height of the bitmap","title":"bitmap()"},{"location":"api_graphics/#bitmap_1","text":"Draws a bitmap on the screen. The bitmap should be 8 bit encoded - each pixel contains 8 y values. The coordinate [x1,y1] allows for only a portion of bitmap to be drawn. void bitmap ( uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 , uint8_t * pBitmap , uint8_t bmp_width , uint8_t bmp_height ) Parameter Type Description x0 uint8_t The X coordinate to place the bitmap - upper left corner y0 uint8_t The Y coordinate to place the bitmap - upper left corner x1 uint8_t The end X coordinate of the bitmap - lower right corner y1 uint8_t The end Y coordinate of the bitmap - lower right corner pBitmap uint8_t * A pointer to the bitmap array bmp_width uint8_t The width of the bitmap bmp_height uint8_t The height of the bitmap","title":"bitmap()"},{"location":"api_graphics/#bitmap_2","text":"Draws a bitmap on the screen using a Bitmap object for the bitmap data. void bitmap ( uint8_t x0 , uint8_t y0 , QwiicBitmap & bitmap ) Parameter Type Description x0 uint8_t The X coordinate to place the bitmap - upper left corner y0 uint8_t The Y coordinate to place the bitmap - upper left corner Bitmap QwiicBitmap A bitmap object","title":"bitmap()"},{"location":"api_graphics/#text","text":"Draws a string using the current font on the screen. void text ( uint8_t x0 , uint8_t y0 , const char * text , uint8_t clr ) Parameter Type Description x0 uint8_t The X coordinate to start drawing the text y0 uint8_t The Y coordinate to start drawing the text text const char* The string to draw on the screen text String The Arduino string to draw on the screen clr uint8_t optional The color value to draw the circle. This defaults to white (1).","title":"text()"},{"location":"api_scroll/","text":"Scrolling Methods for device scrolling scrollStop() If the device is in a scrolling mode, calling this method stops the scroll, and restores the device to normal display operation. This action is performed immediately. void scrollStop ( void ) Parameter Type Description NONE scrollRight() This method is called to start the device scrolling the displayed graphics to the right. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrollRight ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed below Defined values for the interval parameter: Defined Symbol Time Interval Between Steps SCROLL_INTERVAL_2_FRAMES 2 SCROLL_INTERVAL_3_FRAMES 3 SCROLL_INTERVAL_4_FRAMES 4 SCROLL_INTERVAL_5_FRAMES 5 SCROLL_INTERVAL_25_FRAMES 25 SCROLL_INTERVAL_64_FRAMES 64 SCROLL_INTERVAL_128_FRAMES 128 SCROLL_INTERVAL_256_FRAMES 256 scrollVertRight() This method is called to start the device scrolling the displayed graphics vertically and to the right. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrolVertlRight ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed in scrollRight scrollLeft() This method is called start to the device scrolling the displayed graphics to the left. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrollLeft ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed in scrollRight scrollVertLeft() This method is called to start the device scrolling the displayed graphics vertically and to the left. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrolVertlLeft ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed in scrollRight","title":"Scrolling"},{"location":"api_scroll/#scrolling","text":"Methods for device scrolling","title":"Scrolling"},{"location":"api_scroll/#scrollstop","text":"If the device is in a scrolling mode, calling this method stops the scroll, and restores the device to normal display operation. This action is performed immediately. void scrollStop ( void ) Parameter Type Description NONE","title":"scrollStop()"},{"location":"api_scroll/#scrollright","text":"This method is called to start the device scrolling the displayed graphics to the right. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrollRight ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed below Defined values for the interval parameter: Defined Symbol Time Interval Between Steps SCROLL_INTERVAL_2_FRAMES 2 SCROLL_INTERVAL_3_FRAMES 3 SCROLL_INTERVAL_4_FRAMES 4 SCROLL_INTERVAL_5_FRAMES 5 SCROLL_INTERVAL_25_FRAMES 25 SCROLL_INTERVAL_64_FRAMES 64 SCROLL_INTERVAL_128_FRAMES 128 SCROLL_INTERVAL_256_FRAMES 256","title":"scrollRight()"},{"location":"api_scroll/#scrollvertright","text":"This method is called to start the device scrolling the displayed graphics vertically and to the right. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrolVertlRight ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed in scrollRight","title":"scrollVertRight()"},{"location":"api_scroll/#scrollleft","text":"This method is called start to the device scrolling the displayed graphics to the left. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrollLeft ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed in scrollRight","title":"scrollLeft()"},{"location":"api_scroll/#scrollvertleft","text":"This method is called to start the device scrolling the displayed graphics vertically and to the left. This action is performed immediately. The screen will scroll until the scrollStop() method is called. void scrolVertlLeft ( uint8_t start , uint8_t stop , uint8_t interval ) Parameter Type Description start uint8_t The start page address of the scroll - valid values are 0 thru 7 stop uint8_t The stop/end page address of the scroll - valid values are 0 thru 7 interval uint8_t The time interval between scroll step - values listed in scrollRight","title":"scrollVertLeft()"},{"location":"hug_micro_view/","text":"Micro OLED Setup Introduction The Qwiic Micro OLED is a Qwiic enabled version of our micro OLED display! This small monochrome, blue-on-black OLED display displays incredibly clear images This hookup guide will show you how to get started drawing objects and characters on your OLED. Required Materials To get started, you'll need a microcontroller to, well, control everything. SparkFun RedBoard - Programmed with Arduino SparkFun Thing Plus - Artemis SparkFun Thing Plus - ESP32 WROOM SparkFun Thing Plus - SAMD51 Raspberry Pi 4 Model B (2 GB) If the controller you choose doesn't have a built in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed: SparkFun Qwiic Shield for Arduino SparkFun Qwiic Shield for Teensy SparkFun Qwiic Shield for Arduino Nano SparkFun Qwiic SHIM for Raspberry Pi You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs. Flexible Qwiic Cable - 100mm Flexible Qwiic Cable - 500mm Flexible Qwiic Cable - 50mm Flexible Qwiic Cable - 200mm Suggested Reading If you aren't familiar with the Qwiic system, we recommend reading here for an overview . Qwiic Connect System We would also recommend taking a look at the following tutorials if you aren't familiar with them. I2C Overview Qwiic Shield for Arduino & Photon Hookup Guide Hardware Overview Listed below are some of the operating ranges and characteristics of the Qwiic Micro OLED. Characteristic Range Voltage 3.3V Temperature -40\u00b0C to 85\u00b0C I 2 C Address 0X3D (Default) or 0X3C (Closed Jumper) Pins Pin Description Direction GND Ground In 3.3V Power In SDA Data In SCL Clock In Optional Features There are several jumpers on board that can be changed to facilitate several different functions. The first of which is the I 2 C pull-up jumper, highlighted below. If multiple boards are connected to the I 2 C bus, the equivalent resistance goes down, increasing your pull up strength. If multiple boards are connected on the same bus, make sure only one board has the pull-up resistors connected. The ADDR jumper (highlighted below) can be used to change the I 2 C address of the board. The default jumper is open by default, pulling the address pin high and giving us an I 2 C address of 0X3D . Closing this jumper will ground the address pin, giving us an I 2 C address of 0X3C. Hardware Assembly If you haven't yet assembled your Qwiic Shield , now would be the time to head on over to that tutorial. With the shield assembled, Sparkfun's new Qwiic environment means that connecting the screen could not be easier. Just plug one end of the Qwiic cable into the OLED display, the other into the Qwiic Shield and you'll be ready to start displaying images on your little display. The OLED screen itself is loosely attached to the breakout board initially, so be careful handling it! You can either use your own enclosure for the OLED display, or you can use some double sided foam tape for a less permanent solution. Software The SparkFun Micro OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide . Resources and Going Further Now that you've successfully got your OLED displaying things, it's time to incorporate it into your own project! For more on the Qwiic Micro OLED, check out the links below: Schematic (PDF) Eagle Files (ZIP) Datasheet (PDF) Bitmap Generator Qwiic System Landing Page SparkFun Qwiic OLED Arduino Library Qwiic Micro OLED Python Package SparkFun Qwiic Micro OLED GitHub Repository -- Board design files for the Qwiic Micro OLED. Product Showcase: Qwiic Presence Sensor & OLED","title":"Micro OLED Setup"},{"location":"hug_micro_view/#micro-oled-setup","text":"","title":"Micro OLED Setup"},{"location":"hug_micro_view/#introduction","text":"The Qwiic Micro OLED is a Qwiic enabled version of our micro OLED display! This small monochrome, blue-on-black OLED display displays incredibly clear images This hookup guide will show you how to get started drawing objects and characters on your OLED.","title":"Introduction"},{"location":"hug_micro_view/#required-materials","text":"To get started, you'll need a microcontroller to, well, control everything. SparkFun RedBoard - Programmed with Arduino SparkFun Thing Plus - Artemis SparkFun Thing Plus - ESP32 WROOM SparkFun Thing Plus - SAMD51 Raspberry Pi 4 Model B (2 GB) If the controller you choose doesn't have a built in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed: SparkFun Qwiic Shield for Arduino SparkFun Qwiic Shield for Teensy SparkFun Qwiic Shield for Arduino Nano SparkFun Qwiic SHIM for Raspberry Pi You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs. Flexible Qwiic Cable - 100mm Flexible Qwiic Cable - 500mm Flexible Qwiic Cable - 50mm Flexible Qwiic Cable - 200mm","title":"Required Materials"},{"location":"hug_micro_view/#suggested-reading","text":"If you aren't familiar with the Qwiic system, we recommend reading here for an overview . Qwiic Connect System We would also recommend taking a look at the following tutorials if you aren't familiar with them. I2C Overview Qwiic Shield for Arduino & Photon Hookup Guide","title":"Suggested Reading"},{"location":"hug_micro_view/#hardware-overview","text":"Listed below are some of the operating ranges and characteristics of the Qwiic Micro OLED. Characteristic Range Voltage 3.3V Temperature -40\u00b0C to 85\u00b0C I 2 C Address 0X3D (Default) or 0X3C (Closed Jumper)","title":"Hardware Overview"},{"location":"hug_micro_view/#pins","text":"Pin Description Direction GND Ground In 3.3V Power In SDA Data In SCL Clock In","title":"Pins"},{"location":"hug_micro_view/#optional-features","text":"There are several jumpers on board that can be changed to facilitate several different functions. The first of which is the I 2 C pull-up jumper, highlighted below. If multiple boards are connected to the I 2 C bus, the equivalent resistance goes down, increasing your pull up strength. If multiple boards are connected on the same bus, make sure only one board has the pull-up resistors connected. The ADDR jumper (highlighted below) can be used to change the I 2 C address of the board. The default jumper is open by default, pulling the address pin high and giving us an I 2 C address of 0X3D . Closing this jumper will ground the address pin, giving us an I 2 C address of 0X3C.","title":"Optional Features"},{"location":"hug_micro_view/#hardware-assembly","text":"If you haven't yet assembled your Qwiic Shield , now would be the time to head on over to that tutorial. With the shield assembled, Sparkfun's new Qwiic environment means that connecting the screen could not be easier. Just plug one end of the Qwiic cable into the OLED display, the other into the Qwiic Shield and you'll be ready to start displaying images on your little display. The OLED screen itself is loosely attached to the breakout board initially, so be careful handling it! You can either use your own enclosure for the OLED display, or you can use some double sided foam tape for a less permanent solution.","title":"Hardware Assembly"},{"location":"hug_micro_view/#software","text":"The SparkFun Micro OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide .","title":"Software"},{"location":"hug_micro_view/#resources-and-going-further","text":"Now that you've successfully got your OLED displaying things, it's time to incorporate it into your own project! For more on the Qwiic Micro OLED, check out the links below: Schematic (PDF) Eagle Files (ZIP) Datasheet (PDF) Bitmap Generator Qwiic System Landing Page SparkFun Qwiic OLED Arduino Library Qwiic Micro OLED Python Package SparkFun Qwiic Micro OLED GitHub Repository -- Board design files for the Qwiic Micro OLED. Product Showcase: Qwiic Presence Sensor & OLED","title":"Resources and Going Further"},{"location":"hug_transparent/","text":"Transparent OLED Setup Introduction The future is here! You asked and we delivered - our Qwiic Transparent Graphical OLED Breakout allows you to display custom images on a transparent screen using either I 2 C or SPI connections. With Qwiic connectors it's quick (ha ha) and easy to get started with your own images. However, we still have broken out 0.1\"-spaced pins in case you prefer to use a breadboard. Brilliantly lit in the dark and still visible by daylight, this OLED sports a display area of 128x64 pixels, 128x56 of which are completely transparent. Control of the OLED is based on our new HyperDisplay library. This hookup guide will show you how to get started drawing objects and characters on your OLED. Required Materials To get started, you'll need a microcontroller to, well, control everything. SparkFun RedBoard - Programmed with Arduino SparkFun Thing Plus - Artemis SparkFun Thing Plus - ESP32 WROOM SparkFun Thing Plus - SAMD51 Raspberry Pi 4 Model B (2 GB) If the controller you choose doesn't have a built in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed: SparkFun Qwiic Shield for Arduino SparkFun Qwiic Shield for Teensy SparkFun Qwiic Shield for Arduino Nano SparkFun Qwiic SHIM for Raspberry Pi You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs. Flexible Qwiic Cable - 100mm Flexible Qwiic Cable - 500mm Flexible Qwiic Cable - 50mm Flexible Qwiic Cable - 200mm Suggested Reading If you aren't familiar with the Qwiic system, we recommend reading here for an overview . Qwiic Connect System We would also recommend taking a look at the following tutorials if you aren't familiar with them. I2C Overview Qwiic Shield for Arduino & Photon Hookup Guide Hardware Overview Listed below are some of the operating ranges and characteristics of the Qwiic Micro OLED. Characteristic Range Voltage 1.65V-3.3V Supply Current 400 mA I 2 C Address 0X3C (Default) , 0X3D Graphical Display The graphical display is where all the fun stuff happens. The glass itself measures 42mm x 27.16mm, with a pixel display that is 35.5 x 18mm. It houses 128x64 pixels, 128x56 of which are transparent. Graphical Display Qwiic Connectors There are two Qwiic connectors on the board such that you can daisy-chain the boards should you choose to do so. If you're unfamiliar with our Qwiic system, head on over to our Qwiic page to see the advantages! <- Qwiic Connectors GPIO Pins When you look at the GPIO pins, you'll notice that the labels are different from one side to the other. One side is labeled for I 2 C, the other side is labeled for SPI. I 2 C Labels SPI Labels Power LED This bad boy will light up when the board is powered up correctly. <- Power LED You can disable the power LED by cutting the LED jumpers on the back of the board. Power LED Jumpers JPX Jumpers The JPX jumpers are used to either change the I 2 C address or configure the board to use SPI communications. The other two jumpers allow you to disconnect the power LED and to disconnect the I 2 C pull-up resistors when chaining several Qwiic devices. Jumper Function JP1 Holds the Chip Select line low when closed. Close for I 2 C, open for SPI JP2 Selects the address in I 2 C mode. Closed for 0x30 by default and open for 0x31. Open for SPI mode to release the D/C pin JP3 Used to select I 2 C or SPI mode. Close for I 2 C, open for SPI JP4 This jumper should be closed for I 2 C and open for SPI. This connection allows SDA to be bi-directional JPX Jumpers I 2 C Pull-Up Jumper I 2 C devices contain open drains so we include resistors on our boards to allow these devices to pull pins high. This becomes a problem if you have a large number of I 2 C devices chained together. If you plan to daisy chain more than a few Qwiic boards together, you'll need to cut this I 2 C pull-up jumper . <- I 2 C PU Jumpers Hardware Hookup Now that you know what's available on your breakout board we can check out the options for connecting it to the brains of your project. There are two options to use - either I 2 C or SPI - and they each have their own advantages and drawbacks. Read on to choose the best option for your setup. Warning Reminder! This breakout can only handle up to 3.3V on the pins, so make sure to do some level shifting if you're using a 5V microcontroller. I 2 C (Qwiic) The easiest way to start using the Transparent Graphical OLED is to use a Qwiic Cable along with a Qwiic compatible microcontroller (such as the ESP32 Thing Plus ). You can also use the Qwiic Breadboard Cable to attach any I 2 C capable microcontroller, or take the scenic route and solder in all the I 2 C wires to the plated-through connections on the board. So why use I 2 C? It's easy to connect with the Qwiic system, and you can put up to two of the Transparent Graphical Breakouts on the same bus without using any more microcontroller pins. That simplicity comes at a cost to performance though. The maximum clock speed of the I 2 C bus is 400 kHz, and there is additional overhead in data transmission to indicate which bytes are data and which are commands. This means that the I 2 C connection is best for showing static images. Breakout Pin Microcontroller Pin Requirements GND Ground pin. Connect these so the two devices agree on voltages 3V3 3.3V supply pin, capable of up to 400 mA output SDA SDA - the bi-directional data line of your chosen I2C port SCL SCL - the clock line of your chosen I2C port SA0 Optional : change the I2C address of the breakout. Make sure to cut JP2 RST Optional : reset the breakout to a known state by pulsing this low SPI SPI solves the I 2 C speed problems. With SPI there is a control signal that indicates data or command and the maximum clock speed is 10 MHz -- giving SPI 50x more speed! However, it doesn't have the same conveniences of the polarized Qwiic connector and low pin usage. You'll need to solder to the pins. SPI Pinout You can use SPI to connect as many breakouts as you want. For N displays you will need to use at least N + 3 data pins. That's because the MOSI, SCLK, and D/C pins can be shared between displays but each breakout needs its own dedicated Chip Select (CS) pin. Breakout Pin Microcontroller Pin Requirements CS A GPIO pin, set low when talking to the breakout D/C A GPIO pin, indicates if bytes are data or commands SCLK The clock output of your chosen SPI port MOSI The data output of your chosen SPI port 3V3 3.3V supply pin, capable of up to 400 mA output GND Ground pin. Connect these so the two devices agree on voltages Warning Make sure to cut jumpers JP1, JP2, JP3, and JP4 when using SPI mode! Software The Transparent OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide . Resources and Going Further For more information on the Transparent Graphical OLED Breakout, check out some of the links here: Schematic (PDF) Eagle Files (ZIP) SparkFun Qwiic OLED Arduino Library GitHub Repo SFE Product Showcase","title":"Transparent OLED Setup"},{"location":"hug_transparent/#transparent-oled-setup","text":"","title":"Transparent OLED Setup"},{"location":"hug_transparent/#introduction","text":"The future is here! You asked and we delivered - our Qwiic Transparent Graphical OLED Breakout allows you to display custom images on a transparent screen using either I 2 C or SPI connections. With Qwiic connectors it's quick (ha ha) and easy to get started with your own images. However, we still have broken out 0.1\"-spaced pins in case you prefer to use a breadboard. Brilliantly lit in the dark and still visible by daylight, this OLED sports a display area of 128x64 pixels, 128x56 of which are completely transparent. Control of the OLED is based on our new HyperDisplay library. This hookup guide will show you how to get started drawing objects and characters on your OLED.","title":"Introduction"},{"location":"hug_transparent/#required-materials","text":"To get started, you'll need a microcontroller to, well, control everything. SparkFun RedBoard - Programmed with Arduino SparkFun Thing Plus - Artemis SparkFun Thing Plus - ESP32 WROOM SparkFun Thing Plus - SAMD51 Raspberry Pi 4 Model B (2 GB) If the controller you choose doesn't have a built in Qwiic connector, one of the following Qwiic shields that matches your preference of microcontroller is needed: SparkFun Qwiic Shield for Arduino SparkFun Qwiic Shield for Teensy SparkFun Qwiic Shield for Arduino Nano SparkFun Qwiic SHIM for Raspberry Pi You will also need a Qwiic cable to connect the shield to your OLED, choose a length that suits your needs. Flexible Qwiic Cable - 100mm Flexible Qwiic Cable - 500mm Flexible Qwiic Cable - 50mm Flexible Qwiic Cable - 200mm","title":"Required Materials"},{"location":"hug_transparent/#suggested-reading","text":"If you aren't familiar with the Qwiic system, we recommend reading here for an overview . Qwiic Connect System We would also recommend taking a look at the following tutorials if you aren't familiar with them. I2C Overview Qwiic Shield for Arduino & Photon Hookup Guide","title":"Suggested Reading"},{"location":"hug_transparent/#hardware-overview","text":"Listed below are some of the operating ranges and characteristics of the Qwiic Micro OLED. Characteristic Range Voltage 1.65V-3.3V Supply Current 400 mA I 2 C Address 0X3C (Default) , 0X3D","title":"Hardware Overview"},{"location":"hug_transparent/#graphical-display","text":"The graphical display is where all the fun stuff happens. The glass itself measures 42mm x 27.16mm, with a pixel display that is 35.5 x 18mm. It houses 128x64 pixels, 128x56 of which are transparent. Graphical Display","title":"Graphical Display"},{"location":"hug_transparent/#qwiic-connectors","text":"There are two Qwiic connectors on the board such that you can daisy-chain the boards should you choose to do so. If you're unfamiliar with our Qwiic system, head on over to our Qwiic page to see the advantages! <- Qwiic Connectors","title":"Qwiic Connectors"},{"location":"hug_transparent/#gpio-pins","text":"When you look at the GPIO pins, you'll notice that the labels are different from one side to the other. One side is labeled for I 2 C, the other side is labeled for SPI. I 2 C Labels SPI Labels","title":"GPIO Pins"},{"location":"hug_transparent/#power-led","text":"This bad boy will light up when the board is powered up correctly. <- Power LED You can disable the power LED by cutting the LED jumpers on the back of the board. Power LED Jumpers","title":"Power LED"},{"location":"hug_transparent/#jpx-jumpers","text":"The JPX jumpers are used to either change the I 2 C address or configure the board to use SPI communications. The other two jumpers allow you to disconnect the power LED and to disconnect the I 2 C pull-up resistors when chaining several Qwiic devices. Jumper Function JP1 Holds the Chip Select line low when closed. Close for I 2 C, open for SPI JP2 Selects the address in I 2 C mode. Closed for 0x30 by default and open for 0x31. Open for SPI mode to release the D/C pin JP3 Used to select I 2 C or SPI mode. Close for I 2 C, open for SPI JP4 This jumper should be closed for I 2 C and open for SPI. This connection allows SDA to be bi-directional JPX Jumpers","title":"JPX Jumpers"},{"location":"hug_transparent/#i2c-pull-up-jumper","text":"I 2 C devices contain open drains so we include resistors on our boards to allow these devices to pull pins high. This becomes a problem if you have a large number of I 2 C devices chained together. If you plan to daisy chain more than a few Qwiic boards together, you'll need to cut this I 2 C pull-up jumper . <- I 2 C PU Jumpers","title":"I2C Pull-Up Jumper"},{"location":"hug_transparent/#hardware-hookup","text":"Now that you know what's available on your breakout board we can check out the options for connecting it to the brains of your project. There are two options to use - either I 2 C or SPI - and they each have their own advantages and drawbacks. Read on to choose the best option for your setup. Warning Reminder! This breakout can only handle up to 3.3V on the pins, so make sure to do some level shifting if you're using a 5V microcontroller.","title":"Hardware Hookup"},{"location":"hug_transparent/#i2c-qwiic","text":"The easiest way to start using the Transparent Graphical OLED is to use a Qwiic Cable along with a Qwiic compatible microcontroller (such as the ESP32 Thing Plus ). You can also use the Qwiic Breadboard Cable to attach any I 2 C capable microcontroller, or take the scenic route and solder in all the I 2 C wires to the plated-through connections on the board. So why use I 2 C? It's easy to connect with the Qwiic system, and you can put up to two of the Transparent Graphical Breakouts on the same bus without using any more microcontroller pins. That simplicity comes at a cost to performance though. The maximum clock speed of the I 2 C bus is 400 kHz, and there is additional overhead in data transmission to indicate which bytes are data and which are commands. This means that the I 2 C connection is best for showing static images. Breakout Pin Microcontroller Pin Requirements GND Ground pin. Connect these so the two devices agree on voltages 3V3 3.3V supply pin, capable of up to 400 mA output SDA SDA - the bi-directional data line of your chosen I2C port SCL SCL - the clock line of your chosen I2C port SA0 Optional : change the I2C address of the breakout. Make sure to cut JP2 RST Optional : reset the breakout to a known state by pulsing this low","title":"I2C (Qwiic)"},{"location":"hug_transparent/#spi","text":"SPI solves the I 2 C speed problems. With SPI there is a control signal that indicates data or command and the maximum clock speed is 10 MHz -- giving SPI 50x more speed! However, it doesn't have the same conveniences of the polarized Qwiic connector and low pin usage. You'll need to solder to the pins. SPI Pinout You can use SPI to connect as many breakouts as you want. For N displays you will need to use at least N + 3 data pins. That's because the MOSI, SCLK, and D/C pins can be shared between displays but each breakout needs its own dedicated Chip Select (CS) pin. Breakout Pin Microcontroller Pin Requirements CS A GPIO pin, set low when talking to the breakout D/C A GPIO pin, indicates if bytes are data or commands SCLK The clock output of your chosen SPI port MOSI The data output of your chosen SPI port 3V3 3.3V supply pin, capable of up to 400 mA output GND Ground pin. Connect these so the two devices agree on voltages Warning Make sure to cut jumpers JP1, JP2, JP3, and JP4 when using SPI mode!","title":"SPI"},{"location":"hug_transparent/#software","text":"The Transparent OLED Breakout (Qwiic) uses the SparkFun QWIIC OLED Arduino Library. The SparkFun Qwiic OLED library Getting Started guide has library setup instructions and usage examples. Additionally, the full library API documentation is available in the SparkFun Qwiic OLED Library API Reference guide .","title":"Software"},{"location":"hug_transparent/#resources-and-going-further","text":"For more information on the Transparent Graphical OLED Breakout, check out some of the links here: Schematic (PDF) Eagle Files (ZIP) SparkFun Qwiic OLED Arduino Library GitHub Repo SFE Product Showcase","title":"Resources and Going Further"},{"location":"software/","text":"Software Setup Installation The SparkFun Qwiic OLED Arduino Library is available within in the Arduino library manager, which is launched via the Sketch > Include Libraries > Manage Libraries \u2026 menu option in the Arduino IDE. Just search for SparkFun Qwiic OLED Library Note This guide assumes you are using the latest version of the Arduino IDE on your desktop. The following resources available at SparkFun provide the details on setting up and configuring Arduino to use this library. Installing the Arduino IDE Installing Board Definitions in the Arduino IDE Installing an Arduino Library General Use Pattern After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED For this example, the Qwiic Micro OLED is used. QwiicMicroOLED myOLED ; In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. int width , height ; // global variables for use in the sketch void setup () { Serial . begin ( 115200 ); if ( ! myOLED . begin ()){ Serial . println ( \"Device failed to initialize\" ); while ( 1 ); // halt execution } Serial . println ( \"Device is initialized\" ); } Now that the library is initialized, the desired graphics are drawn. Here we erase the screen and draw simple series of lines that originate at the screen origin and fan out across the height of the display. Note Graphics are not send to the OLED device when drawn. Updates are only sent to the device when the display() method is called. This minimizes data transfers to the OLED device, delivering a responsive display response. myOLED . erase (); // Erase the screen myOLED . display (); // Send erase to device delay ( 1000 ); // Slight pause // Draw our lines from point (0,0) to (i, screen height) for ( int i = 0 ; i < width ; i += 6 ){ myOLED . line ( 0 , 0 , i , height -1 ); // draw the line myOLED . display (); // Send the new line to the device for display } Library Provided Examples The SparkFun Qwiic OLED Arduino Library, includes a wide variety of examples. These are available from the Examples menu of the Arduino IDE, and in the examples folder of this repository. For a detailed description of the examples, see the Examples section of the documentation.","title":"Software Setup"},{"location":"software/#software-setup","text":"","title":"Software Setup"},{"location":"software/#installation","text":"The SparkFun Qwiic OLED Arduino Library is available within in the Arduino library manager, which is launched via the Sketch > Include Libraries > Manage Libraries \u2026 menu option in the Arduino IDE. Just search for SparkFun Qwiic OLED Library Note This guide assumes you are using the latest version of the Arduino IDE on your desktop. The following resources available at SparkFun provide the details on setting up and configuring Arduino to use this library. Installing the Arduino IDE Installing Board Definitions in the Arduino IDE Installing an Arduino Library","title":"Installation"},{"location":"software/#general-use-pattern","text":"After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED For this example, the Qwiic Micro OLED is used. QwiicMicroOLED myOLED ; In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. int width , height ; // global variables for use in the sketch void setup () { Serial . begin ( 115200 ); if ( ! myOLED . begin ()){ Serial . println ( \"Device failed to initialize\" ); while ( 1 ); // halt execution } Serial . println ( \"Device is initialized\" ); } Now that the library is initialized, the desired graphics are drawn. Here we erase the screen and draw simple series of lines that originate at the screen origin and fan out across the height of the display. Note Graphics are not send to the OLED device when drawn. Updates are only sent to the device when the display() method is called. This minimizes data transfers to the OLED device, delivering a responsive display response. myOLED . erase (); // Erase the screen myOLED . display (); // Send erase to device delay ( 1000 ); // Slight pause // Draw our lines from point (0,0) to (i, screen height) for ( int i = 0 ; i < width ; i += 6 ){ myOLED . line ( 0 , 0 , i , height -1 ); // draw the line myOLED . display (); // Send the new line to the device for display }","title":"General Use Pattern"},{"location":"software/#library-provided-examples","text":"The SparkFun Qwiic OLED Arduino Library, includes a wide variety of examples. These are available from the Examples menu of the Arduino IDE, and in the examples folder of this repository. For a detailed description of the examples, see the Examples section of the documentation.","title":"Library Provided Examples"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/","text":"Example 1 - Hello A simple example to show the basic setup and use of the SparkFun Qwiic OLED Library. Key Demo Features Declaring a Qwiic OLED device object. Initializing the Qwiic OLED device Drawing a simple graphic - a filled rectangle and a text string Using the current font to center text on the screen. Displaying the graphics on the screen Setup After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ; Initialization In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. void setup () { delay ( 500 ); //Give display time to power on // Serial on! Serial . begin ( 115200 ); Serial . println ( \" \\n\\r -----------------------------------\" ); Serial . print ( \"Running Example 01 on: \" ); Serial . println ( String ( deviceName )); // Initalize the OLED device and related graphics system if ( ! myOLED . begin ()){ Serial . println ( \" - Device Begin Failed\" ); while ( 1 ); } Serial . println ( \"- Begin Success\" ); Drawing Graphics Once the device is enabled, the rest of the setup() function is devoted to drawing a simple graphic on the target device. Filled Rectangle First, draw a filled rectangle on the screen - leave a 4 pixel boarder at the end of the screen. Note that the getWidth() and getHeight() method are used to get the devices screen size. // fill a rectangle on the screen that has a 4 pixel board myOLED . rectangleFill ( 4 , 4 , myOLED . getWidth () -4 , myOLED . getHeight () -4 ); Centered Text The next part of our graphic is a message centered in the drawn rectangle. To do the centering, the current font is accessed from the device, and the size of a character in the font is used to calculate the text position on the screen. Once the position is determined, the message is drawn on the display in black (0 for a color value). String hello = \"hello\" ; // our message // Lets center our message on the screen. We need to current font. QwiicFont * pFont = myOLED . getFont (); // starting x position - width minus string length (font width * number of characters) / 2 int x0 = ( myOLED . getWidth () - pFont -> width * hello . length ()) / 2 ; int y0 = ( myOLED . getHeight () - pFont -> height ) / 2 ; // Draw the text - color of black (0) myOLED . text ( x0 , y0 , hello , 0 ); Displaying the Graphics The last step is sending the graphics to the device. This is accomplished by calling the display() method. // There's nothing on the screen yet - Now send the graphics to the device myOLED . display (); And that's in - the graphic is displayed on the OLED device.","title":"Example 1 - Hello"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#example-1-hello","text":"A simple example to show the basic setup and use of the SparkFun Qwiic OLED Library. Key Demo Features Declaring a Qwiic OLED device object. Initializing the Qwiic OLED device Drawing a simple graphic - a filled rectangle and a text string Using the current font to center text on the screen. Displaying the graphics on the screen","title":"Example 1 - Hello"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#setup","text":"After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ;","title":"Setup"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#initialization","text":"In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. void setup () { delay ( 500 ); //Give display time to power on // Serial on! Serial . begin ( 115200 ); Serial . println ( \" \\n\\r -----------------------------------\" ); Serial . print ( \"Running Example 01 on: \" ); Serial . println ( String ( deviceName )); // Initalize the OLED device and related graphics system if ( ! myOLED . begin ()){ Serial . println ( \" - Device Begin Failed\" ); while ( 1 ); } Serial . println ( \"- Begin Success\" );","title":"Initialization"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#drawing-graphics","text":"Once the device is enabled, the rest of the setup() function is devoted to drawing a simple graphic on the target device.","title":"Drawing Graphics"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#filled-rectangle","text":"First, draw a filled rectangle on the screen - leave a 4 pixel boarder at the end of the screen. Note that the getWidth() and getHeight() method are used to get the devices screen size. // fill a rectangle on the screen that has a 4 pixel board myOLED . rectangleFill ( 4 , 4 , myOLED . getWidth () -4 , myOLED . getHeight () -4 );","title":"Filled Rectangle"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#centered-text","text":"The next part of our graphic is a message centered in the drawn rectangle. To do the centering, the current font is accessed from the device, and the size of a character in the font is used to calculate the text position on the screen. Once the position is determined, the message is drawn on the display in black (0 for a color value). String hello = \"hello\" ; // our message // Lets center our message on the screen. We need to current font. QwiicFont * pFont = myOLED . getFont (); // starting x position - width minus string length (font width * number of characters) / 2 int x0 = ( myOLED . getWidth () - pFont -> width * hello . length ()) / 2 ; int y0 = ( myOLED . getHeight () - pFont -> height ) / 2 ; // Draw the text - color of black (0) myOLED . text ( x0 , y0 , hello , 0 );","title":"Centered Text"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_01_hello/#displaying-the-graphics","text":"The last step is sending the graphics to the device. This is accomplished by calling the display() method. // There's nothing on the screen yet - Now send the graphics to the device myOLED . display (); And that's in - the graphic is displayed on the OLED device.","title":"Displaying the Graphics"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/","text":"Example 2 - Shapes An example that shows drawing simple shapes using the SparkFun Qwiic OLED Library. Key Demo Features Drawing lines, rectangles and circles Demonstrating how graphics size impacts display speed Drawing and erasing graphics quickly XOR operations using raster operators Setup After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ; Drawing Shapes The shapes drawn are broken into a set of functions that perform one test, which is part of the overall example. Lines This test starts with a short, horizontal line that is animated from the top to bottom of the display. After each iteration, the line size is increased and the animating sequence repeated. To animate the line, the display is erased, then the line drawn. Once the line is draw, the updated graphics is sent to the OLED device by calling the display() method. Note When display() is called, only the range of modified pixels is sent to the OLED device, greatly reducing the data transferred for small graphic changes. This is demonstrated by this test. When small lines are drawn, the update rate is fast, but as the line length increases, the update rate of the device is noticeably slower. A longer line requires more data to be sent to the device. void line_test_1 ( void ){ int x , y , i ; int mid = width / 2 ; int delta = mid / 8 ; for ( int j = 1 ; j < 8 ; j ++ ){ x = delta * j ; for ( i = 0 ; i < height * 2 ; i ++ ){ y = i % height ; myOLED . erase (); myOLED . line ( mid - x , y , mid + x , y ); myOLED . display (); } } } This test is followed up with a series of lines that span from a single point to the bottom of the screen, showing the flexibility of the line to raster algorithm used by the library. void line_test_2 ( void ){ for ( int i = 0 ; i < width ; i += 6 ){ myOLED . line ( 0 , 0 , i , height -1 ); myOLED . display (); } delay ( 200 ); myOLED . erase (); for ( int i = width -1 ; i >= 0 ; i -= 6 ){ myOLED . line ( width -1 , 0 , i , height -1 ); myOLED . display (); } } And the last line test draws a series of lines to test all three internal line drawing algorithms. Specifically: * Angled lines drawn by the general purpose line algorithm * Vertical lines drawn by an optimized line routine * Horizontal lines draw by an optimized line routine The test animates to show a growing box, giving an idea of the speed and flexibility of the system. // Iterator function - called to animate graphic void line_test_vert_iter ( uint8_t y0 , uint8_t y1 ){ for ( int i = 0 ; i < width ; i += 8 ) myOLED . line ( i , y0 , i , y1 ); // end off the vertical lines myOLED . line ( width -1 , y0 , width -1 , y1 ); // End lines and cross lines myOLED . line ( 0 , y0 , width -1 , y0 ); myOLED . line ( 0 , y1 , width -1 , y1 ); myOLED . line ( 0 , y0 , width -1 , y1 ); myOLED . line ( 0 , y1 , width -1 , y0 ); } // Entry point for test void line_test_vert ( void ){ int mid = height / 2 ; for ( int i = 0 ; i < height ; i += 4 ){ myOLED . erase (); line_test_vert_iter ( mid - i / 2 , mid + i / 2 ); myOLED . display (); delay ( 10 ); } } Rectangles Several rectangle routines are shown in this example. A key test is a fast drawing routine which animates a small rectangle being drawn diagonally across the screen. In this test, the rectangle is drawn, sent to the device via using display() , then the rectangle is drawn again, but this time in black. This effectively erases the rectangle. The position is incremented and the process loops, causing the rectangle to appear to fly across the screen. The animation is quick, since only the portions of the screen that need updated are actually updated. The animation algorithm: for ( int i = 0 ; i < steps ; i ++ ){ // Draw the rectangle and send it to device myOLED . rectangle ( x , y , side , side ); myOLED . display (); // sends erased rect and new rect pixels to device // Erase the that rect, increment and loop myOLED . rectangle ( x , y , side , side , 0 ); x += xinc ; y += yinc ; } The next rectangle test draws a series of filled rectangles on the screen. The unique aspect of this test is that is uses the XOR functionally to overlay a rectangle on the device, presenting a alternating color pattern. The XOR raster operation is set by calling the setDrawMode() method on the OLED device, and providing the grROPXOR code. This switch the device into a XOR drawing mode. Graphic operations are restored to normal by calling setDrawMode() and providing the grROPCopy code, which copies the new pixel value to the destination. Filled rectangles and XOR operations: void rect_fill_test ( void ){ myOLED . rectangleFill ( 4 , 4 , width / 2-8 , height -8 ); myOLED . rectangleFill ( width / 2 + 4 , 4 , width / 2-8 , height -8 ); myOLED . setDrawMode ( grROPXOR ); // xor myOLED . rectangleFill ( width / 4 , 8 , width / 2 , height -16 ); myOLED . setDrawMode ( grROPCopy ); // back to copy op (default) } Circles The final shape drawn by this example is a series of circles and filled circles. Using the geometry of the screen, a set of circles are drawn and displayed. void circle_test ( void ){ // Lets draw some circles that fit on the device myOLED . circle ( width / 4 , height / 2 , height / 3 ); myOLED . circleFill ( width - width / 4 , height / 2 , height / 3 ); myOLED . circle ( 4 , height / 2 , height / 3 ); myOLED . circleFill ( width - width / 2 , height / 2 , height / 4 ); }","title":"Example 2 - Shapes"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#example-2-shapes","text":"An example that shows drawing simple shapes using the SparkFun Qwiic OLED Library. Key Demo Features Drawing lines, rectangles and circles Demonstrating how graphics size impacts display speed Drawing and erasing graphics quickly XOR operations using raster operators","title":"Example 2 - Shapes"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#setup","text":"After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ;","title":"Setup"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#drawing-shapes","text":"The shapes drawn are broken into a set of functions that perform one test, which is part of the overall example.","title":"Drawing Shapes"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#lines","text":"This test starts with a short, horizontal line that is animated from the top to bottom of the display. After each iteration, the line size is increased and the animating sequence repeated. To animate the line, the display is erased, then the line drawn. Once the line is draw, the updated graphics is sent to the OLED device by calling the display() method. Note When display() is called, only the range of modified pixels is sent to the OLED device, greatly reducing the data transferred for small graphic changes. This is demonstrated by this test. When small lines are drawn, the update rate is fast, but as the line length increases, the update rate of the device is noticeably slower. A longer line requires more data to be sent to the device. void line_test_1 ( void ){ int x , y , i ; int mid = width / 2 ; int delta = mid / 8 ; for ( int j = 1 ; j < 8 ; j ++ ){ x = delta * j ; for ( i = 0 ; i < height * 2 ; i ++ ){ y = i % height ; myOLED . erase (); myOLED . line ( mid - x , y , mid + x , y ); myOLED . display (); } } } This test is followed up with a series of lines that span from a single point to the bottom of the screen, showing the flexibility of the line to raster algorithm used by the library. void line_test_2 ( void ){ for ( int i = 0 ; i < width ; i += 6 ){ myOLED . line ( 0 , 0 , i , height -1 ); myOLED . display (); } delay ( 200 ); myOLED . erase (); for ( int i = width -1 ; i >= 0 ; i -= 6 ){ myOLED . line ( width -1 , 0 , i , height -1 ); myOLED . display (); } } And the last line test draws a series of lines to test all three internal line drawing algorithms. Specifically: * Angled lines drawn by the general purpose line algorithm * Vertical lines drawn by an optimized line routine * Horizontal lines draw by an optimized line routine The test animates to show a growing box, giving an idea of the speed and flexibility of the system. // Iterator function - called to animate graphic void line_test_vert_iter ( uint8_t y0 , uint8_t y1 ){ for ( int i = 0 ; i < width ; i += 8 ) myOLED . line ( i , y0 , i , y1 ); // end off the vertical lines myOLED . line ( width -1 , y0 , width -1 , y1 ); // End lines and cross lines myOLED . line ( 0 , y0 , width -1 , y0 ); myOLED . line ( 0 , y1 , width -1 , y1 ); myOLED . line ( 0 , y0 , width -1 , y1 ); myOLED . line ( 0 , y1 , width -1 , y0 ); } // Entry point for test void line_test_vert ( void ){ int mid = height / 2 ; for ( int i = 0 ; i < height ; i += 4 ){ myOLED . erase (); line_test_vert_iter ( mid - i / 2 , mid + i / 2 ); myOLED . display (); delay ( 10 ); } }","title":"Lines"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#rectangles","text":"Several rectangle routines are shown in this example. A key test is a fast drawing routine which animates a small rectangle being drawn diagonally across the screen. In this test, the rectangle is drawn, sent to the device via using display() , then the rectangle is drawn again, but this time in black. This effectively erases the rectangle. The position is incremented and the process loops, causing the rectangle to appear to fly across the screen. The animation is quick, since only the portions of the screen that need updated are actually updated. The animation algorithm: for ( int i = 0 ; i < steps ; i ++ ){ // Draw the rectangle and send it to device myOLED . rectangle ( x , y , side , side ); myOLED . display (); // sends erased rect and new rect pixels to device // Erase the that rect, increment and loop myOLED . rectangle ( x , y , side , side , 0 ); x += xinc ; y += yinc ; } The next rectangle test draws a series of filled rectangles on the screen. The unique aspect of this test is that is uses the XOR functionally to overlay a rectangle on the device, presenting a alternating color pattern. The XOR raster operation is set by calling the setDrawMode() method on the OLED device, and providing the grROPXOR code. This switch the device into a XOR drawing mode. Graphic operations are restored to normal by calling setDrawMode() and providing the grROPCopy code, which copies the new pixel value to the destination. Filled rectangles and XOR operations: void rect_fill_test ( void ){ myOLED . rectangleFill ( 4 , 4 , width / 2-8 , height -8 ); myOLED . rectangleFill ( width / 2 + 4 , 4 , width / 2-8 , height -8 ); myOLED . setDrawMode ( grROPXOR ); // xor myOLED . rectangleFill ( width / 4 , 8 , width / 2 , height -16 ); myOLED . setDrawMode ( grROPCopy ); // back to copy op (default) }","title":"Rectangles"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_02_lines/#circles","text":"The final shape drawn by this example is a series of circles and filled circles. Using the geometry of the screen, a set of circles are drawn and displayed. void circle_test ( void ){ // Lets draw some circles that fit on the device myOLED . circle ( width / 4 , height / 2 , height / 3 ); myOLED . circleFill ( width - width / 4 , height / 2 , height / 3 ); myOLED . circle ( 4 , height / 2 , height / 3 ); myOLED . circleFill ( width - width / 2 , height / 2 , height / 4 ); }","title":"Circles"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/","text":"Example 3 - Bitmaps An example that shows drawing bitmaps using the SparkFun Qwiic OLED Library. Key Demo Features Understanding bitmap structure Bitmap objects Drawing Bitmap Setup After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ; Initialization In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. void setup () { delay ( 500 ); //Give display time to power on // Serial on! Serial . begin ( 115200 ); Serial . println ( \" \\n\\r -----------------------------------\" ); Serial . print ( \"Running Example 01 on: \" ); Serial . println ( String ( deviceName )); // Initalize the OLED device and related graphics system if ( ! myOLED . begin ()){ Serial . println ( \" - Device Begin Failed\" ); while ( 1 ); } Serial . println ( \"- Begin Success\" ); Drawing Bitmaps","title":"Example 3 - Bitmaps"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#example-3-bitmaps","text":"An example that shows drawing bitmaps using the SparkFun Qwiic OLED Library. Key Demo Features Understanding bitmap structure Bitmap objects Drawing Bitmap","title":"Example 3 - Bitmaps"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#setup","text":"After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ;","title":"Setup"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#initialization","text":"In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. void setup () { delay ( 500 ); //Give display time to power on // Serial on! Serial . begin ( 115200 ); Serial . println ( \" \\n\\r -----------------------------------\" ); Serial . print ( \"Running Example 01 on: \" ); Serial . println ( String ( deviceName )); // Initalize the OLED device and related graphics system if ( ! myOLED . begin ()){ Serial . println ( \" - Device Begin Failed\" ); while ( 1 ); } Serial . println ( \"- Begin Success\" );","title":"Initialization"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_03_bitmaps/#drawing-bitmaps","text":"","title":"Drawing Bitmaps"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/","text":"Example 4 - Text An example that shows drawing bitmaps using the SparkFun Qwiic OLED Library. Key Demo Features Understanding font structure and use Drawing text Using the Arduino Print functionality Setup After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ; Initialization In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. void setup () { delay ( 500 ); //Give display time to power on // Serial on! Serial . begin ( 115200 ); Serial . println ( \" \\n\\r -----------------------------------\" ); Serial . print ( \"Running Example 01 on: \" ); Serial . println ( String ( deviceName )); // Initalize the OLED device and related graphics system if ( ! myOLED . begin ()){ Serial . println ( \" - Device Begin Failed\" ); while ( 1 ); } Serial . println ( \"- Begin Success\" ); Drawing Text","title":"Example 4 - Text"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#example-4-text","text":"An example that shows drawing bitmaps using the SparkFun Qwiic OLED Library. Key Demo Features Understanding font structure and use Drawing text Using the Arduino Print functionality","title":"Example 4 - Text"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#setup","text":"After installing this library in your local Arduino environment, begin with a standard Arduino sketch, and include the header file for this library. // Include the SparkFun qwiic OLED Library #include <SparkFun_Qwiic_OLED.h> The next step is to declare the object for the SparkFun qwiic OLED device used. Like most Arduino sketches, this is done at a global scope (after the include file declaration), not within the setup() or loop() functions. The user selects from one of the following classes: Class Qwiic OLED Device QwiicMicroOLED SparkFun Qwiic Micro OLED QwiicNarrowOLED SparkFun Qwiic OLED Display (128x32) QwiicTransparentOLED SparkFun Transparent Graphical OLED The Example code supports all of the SparkFun Qwiic OLED boards. To select the board being used, uncomment the #define for the demo board. For this example, the Qwiic Micro OLED is used. #define MICRO //#define NARROW //#define TRANSPARENT Which results in myOLED being declared as: QwiicMicroOLED myOLED ;","title":"Setup"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#initialization","text":"In the setup() function of this sketch, like all of the SparkFun qwiic libraries, the device is initialized by calling the begin() method. This method returns a value of true on success, or false on failure. void setup () { delay ( 500 ); //Give display time to power on // Serial on! Serial . begin ( 115200 ); Serial . println ( \" \\n\\r -----------------------------------\" ); Serial . print ( \"Running Example 01 on: \" ); Serial . println ( String ( deviceName )); // Initalize the OLED device and related graphics system if ( ! myOLED . begin ()){ Serial . println ( \" - Device Begin Failed\" ); while ( 1 ); } Serial . println ( \"- Begin Success\" );","title":"Initialization"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_04_text/#drawing-text","text":"","title":"Drawing Text"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/","text":"Other Examples Descriptions of the other demos that are provided as part of the SparkFun Qwiic OLED Library. Scroll-Flip Clock Cube Multi","title":"Other Examples"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#other-examples","text":"Descriptions of the other demos that are provided as part of the SparkFun Qwiic OLED Library.","title":"Other Examples"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#scroll-flip","text":"","title":"Scroll-Flip"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#clock","text":"","title":"Clock"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#cube","text":"","title":"Cube"},{"location":"sparkfun-qwiic-oled-arduino-library-examples/ex_other/#multi","text":"","title":"Multi"}]}